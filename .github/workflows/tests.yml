name: Portfolio Automation Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: "0 17 * * *" # daily at 17:00 UTC

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore ./PortfolioAutomation/PortfolioAutomation.sln

      - name: Build solution
        run: dotnet build ./PortfolioAutomation/PortfolioAutomation.sln --configuration Release --no-restore

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run tests
        run: |
          dotnet test ./PortfolioAutomationTest/PortfolioAutomationTest.csproj \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./TestResults
        env:
          BASE_URL: ${{ secrets.BASE_URL }}
        continue-on-error: true   

      - name: Convert TRX to JSON (Python inline)
        if: always()
        run: |
          python3 - <<EOF
          import xml.etree.ElementTree as ET
          import json, os
          trx_file = "./TestResults/test-results.trx"
          json_file = "./TestResults/test-results.json"
          ns = {'ns': 'http://microsoft.com/schemas/VisualStudio/TeamTest/2010'}
          results = {"test_runs": []}
          if os.path.exists(trx_file):
              tree = ET.parse(trx_file)
              root = tree.getroot()
              for unit_test_result in root.findall('.//ns:UnitTestResult', ns):
                  results["test_runs"].append({
                      "test_name": unit_test_result.get("testName"),
                      "outcome": unit_test_result.get("outcome"),
                      "start_time": unit_test_result.get("startTime"),
                      "end_time": unit_test_result.get("endTime"),
                      "duration": unit_test_result.get("duration")
                  })
          else:
              results["error"] = "No TRX file found"
          with open(json_file, "w") as f:
              json.dump(results, f, indent=2)
          print(f"Converted {trx_file} -> {json_file}")
          EOF

      - name: Upload test results (TRX + JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./TestResults/*

      - name: Commit JSON results to results branch
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          mkdir -p results-data
          cp ./TestResults/test-results.json results-data/$(date +'%Y-%m-%d')-${{ github.run_id }}.json

          git fetch origin
          git checkout results || git checkout -b results origin/results

          git pull origin results --rebase || true

          git add results-data/
          git commit -m "Add test results for $(date +'%Y-%m-%d') run ${{ github.run_id }}" || echo "No changes to commit"
          git push origin results
